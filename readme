Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Frank Liu

------------------------------------------------------------------------
Student 2: What is your name?

Winsice Ng 

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.
The course's precepts.
The course's website.
The course's textbooks.
The man pages on the armlab cluster.
The course's current staff members outside of class time through Ed.
Current Intro Lab TAs through visits to the Intro COS Lab.


------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.
The course's precepts.
The course's website.
The course's textbooks.
The man pages on the armlab cluster.
The course's current staff members outside of class time through Ed.
Current Intro Lab TAs through visits to the Intro COS Lab.


------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

This assignment helped me learn and use GDB better. It also helped
me read through code and understand how different data types and 
abstractions work together to serve a use. This assignment took 
quite a deal of time, so it was defintiely tedious. I also better
understand ADT's and AO's as well as writing better code that 
has modularity and encapsulation. Not to mention, I now have an idea 
of how filetrees are built. 

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

It was helpful as I got to practice reading code and debugging. I also
learned how ADT's work in regards with other files which helped me 
understand modularity and encapsulation better. 

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

None. 

------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None.

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

nodeFT.h:123:5: Function exported but not used outside nodeFT: Node_compare
nodeFT.c:399:1: Definition of Node_compare

Although Node_compare is not used outside of nodeFt, it's something that the module
might naturally have as part of its interface even though we don't happen to use it.
Thus, we decided to keep it as a nonstatic method rather than making it static 
to fix the error. 

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

      ft.c: line 305: medium priority:
      Do you want to validate 'pvContents' through an assert?
   
      ft.c: line 459: medium priority:
      Do you want to validate 'pvNewContents' through an assert?
   
      nodeFT.c: line 164: medium priority:
      Do you want to validate 'pvContent' through an assert?
   
      nodeFT.c: line 372: medium priority:
      Do you want to validate 'pvNewContents' through an assert?

      We disagree with the assert because pvContents can be 
      NULL because NULL content can be put into files. 


------------------------------------------------------------------------
For each of the five faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_Insert 
---------------------------------------------------------------
         ./bdtBad2        BDT_freeSubtree
---------------------------------------------------------------
         ./bdtBad3        BDT_addChild 
---------------------------------------------------------------
         ./bdtBad4        BDT_strlenAccumlate 
---------------------------------------------------------------
         ./bdtBad5        BDT_findNode
===============================================================

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

1. Modularity: For example, Node_new in nodeDTGood.c can be chunked apart into private
               helper methods. 

2. The arguments for the functions for nodeDT are not in consistent DT_preOrderTraversal
      across all functions. Looking at these two function declarations
      int Node_new(Path_T oPPath, Node_T oNParent, Node_T *poNResult); 
      boolean Node_hasChild(Node_T oNParent, Path_T oPPath, 
            size_t *pulChildID);
      Node_new() follows path, parent, pointer while Node_hasChild()
      follows parent, path, pointer. The ordering of the variables
       parent and path are not consistent. 

3. #include <stddef.h> does not need to be included in both .h and .c fules
      (e.g. nodeDTGood.c and dt.h)

4. Function comments go with the function declarations in the .h header file.
      they do not not need to be repeated before the functions in 
      the source code (e.g. Node_new function)

5. Functions can have more assert statements to check their arguments.
      For example, In dtGood.c, the function DT_preOrderTraversal can 
      have an assert statement that aborts if Node_T n is null, 
      rather than the if statement it currently has. 

------------------------------------------------------------------------